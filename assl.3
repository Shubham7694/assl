.\" $assl$
.\"
.\" Copyright (c) 2009 Marco Peereboom <marco@peereboom.us>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt ASSL 3
.Os
.Sh NAME
.Nm assl
.Nd Agglomerated SSL
.Sh SYNOPSIS
.Fd #include <assl.h>
.Ft void
.Fn assl_initialize "void"
.Ft struct assl_context	*
.Fn assl_alloc_context "enum assl_method method"
.Ft int
.Fn assl_load_file_certs "struct assl_context *ctx, char *ca, char *cert, char *key"
.Ft int
.Fn assl_connect "struct assl_context *ctx, char *host, char *port"
.Ft int
.Fn assl_serve "char *host, char *port, void (*callback)(int sock)"
.Ft int
.Fn assl_accept "struct assl_context *ctx, int sock"
.Sh DESCRIPTION
.Fn assl_initialize
prepares the library for first use.
This function must be called before any other function is called.
.Pp
.Fn assl_alloc_context
allocates a
.Nm
context.
A context contains all SSL/TLS connection specfic details.
The
function will return NULL to indicate failure.
.Pp
.Fn assl_load_file_certs
loads all required keys & certificates to authenticate a client or server.
.Fa cert
&
.Fa key
contain the certificate and key required to authenticate the
calling machine to the remote machine.
.Fa ca
contains the Certificate Authority certificate.
All files must be provided in PEM format.
The
.Fa cert
is validated against the
.Fa key
.
Providing a CA is required.
The function returns a non-zero value to indicate failure.
.Pp
.Fn assl_connect
tries to establish a SSL/TLS connection to
.Fa host
.Fa port.
The
function returns a non-zero value to indicate failure.
More precisely, -1 for libc failures and 1 for
.Xr openssl 1
failures.
.Pp
.Fn assl_serve
is a blocking function that sets up a listening socket that waits for
incoming connections on
.Fa host
.Fa port
.
Once an incoming connection is detected it will call
.Fa callback
with the appropriate socket.
It is the responsibility of the callback function to either fork and setup
a context.
Both
.Fa host
and
.Fa port
can be NULL.
In the
.Fa host
case the server will listen on all possible IP addresses and in the
.Fa port
case the server will listen on port 4433.
This function can only return failure and this condition  shall be
considered fatal.
.Pp
.Fn assl_accept
is the equivalent of the
.Xr accept 2
function with the added SSL/TLS handshake and certificate validation
functionality.
This function should be called from the
.Fa callback
to
.Fn assl_serve
function after a context has been allocated in said function.
The function returns a non-zero value to indicate failure.
.Sh EXAMPLES
The following code fragment illustrates the client case:
.Bd -literal -offset indent
#include "assl.h"

int
main(int argc, char *argv[])
{
	struct assl_context	*c;

	assl_initialize();

	c = assl_alloc_context(ASSL_M_TLSV1_CLIENT);
	if (c == NULL)
		errx(1, "assl_alloc_context");

	if (assl_load_file_certs(c, "../ca/ca.crt",
	    "client/client.crt", "client/private/client.key"))
		errx(1, "assl_load_certs");

	if (assl_connect(c, "localhost", ASSL_DEFAULT_PORT))
		errx(1, "assl_connect");

	return (0);
}
.Ed
.Pp
The following code fragment illustrates the server case:
.Bd -literal -offset indent
#include "assl.h"

void			serve_callback(int);

void
serve_callback(int s)
{
	struct assl_context	*c;

	c = assl_alloc_context(ASSL_M_ALL_SERVER);
	if (c == NULL)
		errx(1, "assl_alloc_context");

	if (assl_load_file_certs(c, "../ca/ca.crt",
	    "server/server.crt", "server/private/server.key"))
		errx(1, "assl_load_certs");

	if (assl_accept(c, s))
		errx(1, "assl_accept");

	errx(1, "do something!");
}

int
main(int argc, char *argv[])
{
	assl_initialize();

	assl_serve(NULL, ASSL_DEFAULT_PORT, serve_callback);
	
	return (0);
}
.Ed
.Pp
.Sh DON'T SEE ALSO
.Xr openssl 1
.Sh HISTORY
.An -nosplit
.Pp
.Nm
was written by
.An Marco Peereboom Aq marco@peereboom.us
in order to hide the awful OpenSSL API.
It strives to reuse
.Xr openssl 1
APIs and provide a much simpler and sane interface for programmers that are
interested in writing applications that require the SSL/TLS protocol for
secure communications.
